'use client';

import Link from 'next/link';
import { useTranslation } from 'react-i18next';
import {
  ORG_OPTIONS_BY_CATEGORY,
  ORG_CATEGORY_LABELS,
  type OrgCategory,
  type OrgOption,
} from './organizationOptions';

const ORDER: OrgCategory[] = [
  'technical_services',
  'rental_supply',
  'transport_delivery',
  'support_tourism',
];

export default function OrganizationCreateChooser() {
  const { t } = useTranslation('common');

  const getKey = (o: { key: string; type: string; subtype?: string }) =>
    `organization_create_chooser.${o.key}`;

  const title = (o: OrgOption) =>
    t(`${getKey(o)}.title`, { defaultValue: fallbackTitle(o) });

  const desc = (o: OrgOption) =>
    t(`${getKey(o)}.description`, { defaultValue: fallbackDesc(o) });

  return (
    <div className="border border-dashed border-gray-300 rounded-xl p-6 bg-gray-50">
      <h3 className="text-base font-semibold text-gray-700 mb-4">
        üëã {t('organization_create_chooser.intro')}
      </h3>

      <div className="space-y-8">
        {ORDER.map((cat) => {
          const items = ORG_OPTIONS_BY_CATEGORY[cat];
          if (!items?.length) return null;

          return (
            <section key={cat}>
              <h4 className="text-lg font-semibold text-gray-800 mb-3">
                {t(`organization_group.${cat}`, {
                  defaultValue: ORG_CATEGORY_LABELS[cat],
                })}
              </h4>

              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {items.map((option) => (
                  <Link
                    key={option.key}
                    href={option.path}
                    className="p-4 bg-white rounded-lg shadow-sm border border-gray-200 hover:border-[#00d289] hover:shadow transition"
                  >
                    <div className="flex items-start gap-3">
                      {option.icon()}
                      <div className="leading-tight">
                        <div className="font-semibold text-sm text-gray-800">
                          {title(option)}
                        </div>
                        <p className="text-xs text-gray-500">
                          {desc(option)}
                        </p>
                      </div>
                    </div>
                  </Link>
                ))}
              </div>
            </section>
          );
        })}
      </div>
    </div>
  );
}

/* ------------------------------- fallbacks -------------------------------- */

function fallbackTitle(o: OrgOption) {
  if (o.type === 'technician_partner')
    return o.subtype === 'shop' ? 'C·ª≠a h√†ng s·ª≠a xe' : 'K·ªπ thu·∫≠t vi√™n ƒë·ªôc l·∫≠p';
  switch (o.type) {
    case 'rental_company': return 'C√¥ng ty cho thu√™ xe';
    case 'private_provider': return 'Ch·ªß xe c√° nh√¢n';
    case 'agent': return 'C·ªông t√°c vi√™n / Ng∆∞·ªùi gi·ªõi thi·ªáu';
    case 'city_driver': return 'T√†i x·∫ø th√†nh ph·ªë';
    case 'intercity_driver': return 'T√†i x·∫ø li√™n t·ªânh';
    case 'delivery_partner': return 'ƒê·ªëi t√°c giao h√†ng';
    case 'intercity_bus': return 'Nh√† xe li√™n t·ªânh';
    case 'vehicle_transport': return 'ƒê∆°n v·ªã v·∫≠n chuy·ªÉn';
    case 'tour_guide': return 'H∆∞·ªõng d·∫´n vi√™n du l·ªãch';
    default: return o.key;
  }
}

function fallbackDesc(o: OrgOption) {
  if (o.type === 'technician_partner')
    return o.subtype === 'shop'
      ? 'D·ªãch v·ª• t·∫°i garage: s·ª≠a pin, phanh, v√† xe.'
      : 'K·ªπ thu·∫≠t vi√™n di ƒë·ªông cung c·∫•p s·ª≠a ch·ªØa t·∫≠n n∆°i.';
  switch (o.type) {
    case 'rental_company': return 'Qu·∫£n l√Ω ƒë·ªôi xe, tr·∫°m, ƒë∆°n ƒë·∫∑t v√† nh√¢n s·ª±.';
    case 'private_provider': return 'Cho thu√™ xe c√° nh√¢n ho·∫∑c cung c·∫•p d·ªãch v·ª•.';
    case 'agent': return 'Gi·ªõi thi·ªáu kh√°ch h√†ng v√† nh·∫≠n hoa h·ªìng.';
    case 'city_driver': return 'Ch·ªü h√†nh kh√°ch n·ªôi th√†nh.';
    case 'intercity_driver': return 'Ch·ªü h√†nh kh√°ch gi·ªØa c√°c t·ªânh.';
    case 'delivery_partner': return 'Giao ki·ªán h√†ng nh·ªè (‚â§20kg) trong n·ªôi th√†nh.';
    case 'intercity_bus': return 'Qu·∫£n l√Ω tuy·∫øn ƒë∆∞·ªùng & v·∫≠n chuy·ªÉn li√™n t·ªânh.';
    case 'vehicle_transport': return 'V·∫≠n chuy·ªÉn h√†ng h√≥a & xe c·ªô trong/ngo√†i TP.';
    case 'tour_guide': return 'T·ªï ch·ª©c tour xe ho·∫∑c h√†nh tr√¨nh t·ª± l√°i.';
    default: return '';
  }
}
