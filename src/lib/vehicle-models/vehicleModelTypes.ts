import { Timestamp, FieldValue } from 'firebase/firestore';

/**
 * C√°c lo·∫°i ph∆∞∆°ng ti·ªán m√† h·ªá th·ªëng h·ªó tr·ª£. _ B·∫Øt ƒë·∫ßu t·ª´ 10/07/2025
 */
export type VehicleType = 'bike' | 'motorbike' | 'car' | 'van' | 'bus' | 'other';

export const VEHICLE_TYPE_LABELS: Record<VehicleType, string> = {
  bike: 'Bicycle',
  motorbike: 'Motorbike',
  car: 'Car',
  van: 'Van / Limo',
  bus: 'Bus / Coach',
  other: 'Other',
};

/**
 * Ph√¢n lo·∫°i ph·ª• cho t·ª´ng lo·∫°i ph∆∞∆°ng ti·ªán (hi·ªÉn th·ªã c·ª• th·ªÉ h∆°n)
 */
export const VEHICLE_SUBTYPE_OPTIONS = [
  // üö≤ Bicycle
  { label: 'Road Bike', value: 'roadbike', vehicleType: 'bike' },
  { label: 'Mountain Bike', value: 'mountainbike', vehicleType: 'bike' },
  { label: 'City Bike', value: 'citybike', vehicleType: 'bike' },
  { label: 'Folding Bike', value: 'foldingbike', vehicleType: 'bike' },
  { label: 'Fat Bike', value: 'fatbike', vehicleType: 'bike' },
  { label: 'Tandem Bike', value: 'tandem', vehicleType: 'bike' },
  { label: 'Electric Bike (eBike)', value: 'ebike', vehicleType: 'bike' },
  { label: 'Cargo Bike', value: 'cargobike', vehicleType: 'bike' },

  // üõµ Motorbike
  { label: 'Scooter', value: 'scooter', vehicleType: 'motorbike' },
  { label: 'Cub / Underbone', value: 'cub', vehicleType: 'motorbike' },
  { label: 'Manual Motorbike', value: 'manualbike', vehicleType: 'motorbike' },
  { label: '3-Wheel Motorbike', value: 'tricycle', vehicleType: 'motorbike' },
  { label: 'Electric Motorbike', value: 'emotorbike', vehicleType: 'motorbike' },
  { label: 'Electric Scooter', value: 'escooter', vehicleType: 'motorbike' },

  // üöó Car
  { label: 'Hatchback', value: 'hatchback', vehicleType: 'car' },
  { label: 'Sedan', value: 'sedan', vehicleType: 'car' },
  { label: 'SUV', value: 'suv', vehicleType: 'car' },
  { label: 'Crossover', value: 'crossover', vehicleType: 'car' },
  { label: 'Pickup Truck', value: 'pickup', vehicleType: 'car' },
  { label: 'Electric Car', value: 'electriccar', vehicleType: 'car' },

  // üöê Van / Limo
  { label: 'Mini Van', value: 'minivan', vehicleType: 'van' },
  { label: 'Van', value: 'van', vehicleType: 'van' },
  { label: 'Limousine', value: 'limousine', vehicleType: 'van' },

  // üöå Bus
  { label: 'Minibus', value: 'minibus', vehicleType: 'bus' },
  { label: 'Coach', value: 'coach', vehicleType: 'bus' },
  { label: 'Sleeper Bus', value: 'sleeperbus', vehicleType: 'bus' },

  // üöú Other
  { label: 'ATV / Quad Bike', value: 'atv', vehicleType: 'other' },
  { label: 'Golf Cart', value: 'golfcart', vehicleType: 'other' },
  { label: 'Truck / Lorry', value: 'truck', vehicleType: 'other' },
  { label: 'Trailer', value: 'trailer', vehicleType: 'other' },
  { label: 'Other', value: 'other', vehicleType: 'other' },
] as const;

export const VEHICLE_SUBTYPE_LABELS: Record<string, string> = VEHICLE_SUBTYPE_OPTIONS.reduce((acc, item) => {
  acc[item.value] = item.label;
  return acc;
}, {} as Record<string, string>);


/**
 * Lo·∫°i nhi√™n li·ªáu s·ª≠ d·ª•ng cho ph∆∞∆°ng ti·ªán
 */
export type FuelType = 'electric' | 'gasoline' | 'hybrid';

export const FUEL_TYPE_LABELS: Record<FuelType, string> = {
  electric: 'Electric',
  gasoline: 'Gasoline',
  hybrid: 'Hybrid',
};

/**
 * M√¥ t·∫£ m·ªôt m·∫´u ph∆∞∆°ng ti·ªán (vehicle model) thu·ªôc v·ªÅ c√¥ng ty cho thu√™.
 */
export interface VehicleModel {
  id: string;
  companyId: string;              // ID c√¥ng ty s·ªü h·ªØu m·∫´u xe

  name: string;                   // T√™n th∆∞∆°ng m·∫°i, v√≠ d·ª•: "Klara S", "Ford Transit"
  description: string;           // M√¥ t·∫£ chi ti·∫øt
  vehicleType: VehicleType;      // Lo·∫°i ph∆∞∆°ng ti·ªán
  vehicleSubType?: string;       // Ph√¢n lo·∫°i chi ti·∫øt h∆°n

  brand?: string;                // H√£ng s·∫£n xu·∫•t (VinFast, Honda, etc.)
  modelCode?: string;            // M√£ k·ªπ thu·∫≠t c·ªßa h√£ng (tu·ª≥ ch·ªçn)

  batteryCapacity?: string;      // Dung l∆∞·ª£ng pin n·∫øu l√† xe ƒëi·ªán (VD: "72V22Ah")
  motorPower?: number;           // C√¥ng su·∫•t motor (W)
  fuelType?: FuelType;           // Lo·∫°i nhi√™n li·ªáu

  topSpeed?: number;             // T·ªëc ƒë·ªô t·ªëi ƒëa (km/h)
  range?: number;                // Qu√£ng ƒë∆∞·ªùng t·ªëi ƒëa m·ªói l·∫ßn s·∫°c/ƒë·ªï xƒÉng (km)
  weight?: number;               // Tr·ªçng l∆∞·ª£ng xe (kg)
  maxLoad?: number;              // T·∫£i tr·ªçng t·ªëi ƒëa (kg)
  capacity?: number;             // S·ªë ch·ªó ng·ªìi (√¥ t√¥, xe kh√°ch...)

  pricePerHour?: number;         // Gi√° thu√™ theo gi·ªù
  pricePerDay?: number;          // Gi√° thu√™ theo ng√†y
  pricePerWeek?: number;         // Gi√° thu√™ theo tu·∫ßn
  pricePerMonth?: number;        // Gi√° thu√™ theo th√°ng

  imageUrl?: string;             // ·∫¢nh ƒë·∫°i di·ªán m·∫´u xe
  available: boolean;            // ƒêang ho·∫°t ƒë·ªông hay t·∫°m ng∆∞ng

  createdAt?: Timestamp | FieldValue;
  updatedAt?: Timestamp | FieldValue;
}
